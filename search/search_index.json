{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Server-side Developer Documentation for Fabric Documentation for server-side modding with fabric","title":"Server-side Developer Documentation for Fabric"},{"location":"#server-side-developer-documentation-for-fabric","text":"Documentation for server-side modding with fabric","title":"Server-side Developer Documentation for Fabric"},{"location":"events/","text":"Events Events provide a way of running code when a certain action happens Fabric's API has the following groups of events: Lifecycle events Interaction events Networking events For this example, we will use the lifecycle events module. Registering the callback When you want to listen for an event, you register a bit of code that will run whenever the event is triggered. Listening for the server starting event would be as follows: public class MyMod implements DedicatedServerModInitializer { @Override public void onInitializeServer() { ServerLifecycleEvents.SERVER_STARTING.register(server -> { System.out.println(\"SERVER STARTING\"); }); } } The server starting event is defined within ServerLifecycleEvents in a field named SERVER_STARTING . We then register using the SERVER_STARTING event, which requires a lambda expression with a single MinecraftServer parameter. What is MinecraftServer ? If you have ever written a plugin for the Bukkit API, you will know that you interact with the API, not the game. This is not the case on Fabric. MinecraftServer is the name of the class that is, well, the Minecraft Server in use at the time. As you progress through this guide, we will show you many of the methods that this class contains. However, as the is so much in this class, we will not be able to cover all of its features - and this is a recurring theme. For this reason, if you are looking for something, IDE tab completion will be your friend. If you ever have issues, you can ask on the Fabric Server-side Development Discord server . The simplest way to put it is: you will know how to do more the more time you spend playing around. More uses of events You can register events anywhere, and have whatever logic you want run when they are called. Let's look at a more complex example. public class MyMod implements DedicatedServerModInitializer { @Override public void onInitializeServer() { registerServerStarted(); ServerLifecycleEvents.SERVER_STOPPING.register(server -> onServerStop(server)); } public void registerServerStarted() { ServerLifecycleEvents.SERVER_STARTED.register(server -> { if (server.getPlayerManager().getPlayerList().isEmpty()) { System.out.println(\"SERVER STARTING\"); } }); } private void onServerStop(MinecraftServer server) { System.out.println(\"SERVER STOPPING\"); } } Fabric Wiki This page also has an alternative on the Fabric wiki , although it is very out of date.","title":"Events"},{"location":"events/#events","text":"Events provide a way of running code when a certain action happens Fabric's API has the following groups of events: Lifecycle events Interaction events Networking events For this example, we will use the lifecycle events module.","title":"Events"},{"location":"events/#registering-the-callback","text":"When you want to listen for an event, you register a bit of code that will run whenever the event is triggered. Listening for the server starting event would be as follows: public class MyMod implements DedicatedServerModInitializer { @Override public void onInitializeServer() { ServerLifecycleEvents.SERVER_STARTING.register(server -> { System.out.println(\"SERVER STARTING\"); }); } } The server starting event is defined within ServerLifecycleEvents in a field named SERVER_STARTING . We then register using the SERVER_STARTING event, which requires a lambda expression with a single MinecraftServer parameter.","title":"Registering the callback"},{"location":"events/#what-is-minecraftserver","text":"If you have ever written a plugin for the Bukkit API, you will know that you interact with the API, not the game. This is not the case on Fabric. MinecraftServer is the name of the class that is, well, the Minecraft Server in use at the time. As you progress through this guide, we will show you many of the methods that this class contains. However, as the is so much in this class, we will not be able to cover all of its features - and this is a recurring theme. For this reason, if you are looking for something, IDE tab completion will be your friend. If you ever have issues, you can ask on the Fabric Server-side Development Discord server . The simplest way to put it is: you will know how to do more the more time you spend playing around.","title":"What is MinecraftServer?"},{"location":"events/#more-uses-of-events","text":"You can register events anywhere, and have whatever logic you want run when they are called. Let's look at a more complex example. public class MyMod implements DedicatedServerModInitializer { @Override public void onInitializeServer() { registerServerStarted(); ServerLifecycleEvents.SERVER_STOPPING.register(server -> onServerStop(server)); } public void registerServerStarted() { ServerLifecycleEvents.SERVER_STARTED.register(server -> { if (server.getPlayerManager().getPlayerList().isEmpty()) { System.out.println(\"SERVER STARTING\"); } }); } private void onServerStop(MinecraftServer server) { System.out.println(\"SERVER STOPPING\"); } }","title":"More uses of events"},{"location":"events/#fabric-wiki","text":"This page also has an alternative on the Fabric wiki , although it is very out of date.","title":"Fabric Wiki"},{"location":"mixin-injects/","text":"Mixin Injects Mixin is a powerful tool used for bytecode transformation - specifically modifying the Minecraft source code in a way that prevents as many conflicts as possible between mods. Let's take a look at an example. Mixin triggered whenever a block is broken @Mixin(Block.class) public class MixinBlock { @Inject(at = @At(\"HEAD\"), method = \"onBreak\") public void onBreak(World world, BlockPos pos, BlockState state, PlayerEntity player, CallbackInfo info) { player.sendMessage(new LiteralText(\"You broke \" + Registry.BLOCK.getId(state.getBlock())), false); } } This is considerably more complex than anything shown so far. But what does it do? @Mixin(Block.class) This tells the compiler that this is a mixin class, targeting the class net.minecraft.block.Block . @Inject(at = @At(\"HEAD\"), method = \"onBreak\") @Inject is a mixin annotation. It tells the mixin compiler to \"inject\" the logic in our method to the part of the method onBreak specified by the at argument. @At(\"HEAD\") refers to the top of the method target; the first bit of code to be run when that method is called. We then have a method with the same arguments as our target method, plus a CallbackInfo object. Fabric Wiki Confused? The fabric wiki has a very extensive guide to mixins Mixin cheatsheet The Mixin cheatsheet has guides and examples for every type of mixin. If you want to learn how to do more than injecting at the top of a method, I would advise checking it out. Game code used in the example LiteralText : new LiteralText(String text) - this creates a Text object with the value of the string passed. Text : a class representing a message that can be sent to a player through chat. Contains colour information, the string literal, or potentially a translation key. PlayerEntity#sendMessage(Text text, boolean actionBar) : Sends the player a message with the text component provided in the arguments. actionBar should nearly always be false","title":"Mixin Injects"},{"location":"mixin-injects/#mixin-injects","text":"Mixin is a powerful tool used for bytecode transformation - specifically modifying the Minecraft source code in a way that prevents as many conflicts as possible between mods. Let's take a look at an example.","title":"Mixin Injects"},{"location":"mixin-injects/#mixin-triggered-whenever-a-block-is-broken","text":"@Mixin(Block.class) public class MixinBlock { @Inject(at = @At(\"HEAD\"), method = \"onBreak\") public void onBreak(World world, BlockPos pos, BlockState state, PlayerEntity player, CallbackInfo info) { player.sendMessage(new LiteralText(\"You broke \" + Registry.BLOCK.getId(state.getBlock())), false); } } This is considerably more complex than anything shown so far. But what does it do? @Mixin(Block.class) This tells the compiler that this is a mixin class, targeting the class net.minecraft.block.Block . @Inject(at = @At(\"HEAD\"), method = \"onBreak\") @Inject is a mixin annotation. It tells the mixin compiler to \"inject\" the logic in our method to the part of the method onBreak specified by the at argument. @At(\"HEAD\") refers to the top of the method target; the first bit of code to be run when that method is called. We then have a method with the same arguments as our target method, plus a CallbackInfo object.","title":"Mixin triggered whenever a block is broken"},{"location":"mixin-injects/#fabric-wiki","text":"Confused? The fabric wiki has a very extensive guide to mixins","title":"Fabric Wiki"},{"location":"mixin-injects/#mixin-cheatsheet","text":"The Mixin cheatsheet has guides and examples for every type of mixin. If you want to learn how to do more than injecting at the top of a method, I would advise checking it out.","title":"Mixin cheatsheet"},{"location":"mixin-injects/#game-code-used-in-the-example","text":"LiteralText : new LiteralText(String text) - this creates a Text object with the value of the string passed. Text : a class representing a message that can be sent to a player through chat. Contains colour information, the string literal, or potentially a translation key. PlayerEntity#sendMessage(Text text, boolean actionBar) : Sends the player a message with the text component provided in the arguments. actionBar should nearly always be false","title":"Game code used in the example"},{"location":"setup/","text":"Setup Prerequisites You will need: Java Development Kit Version 16 or newer IntelliJ IDEA Intermediate Java knowledge Git and basic git experience The Minecraft Development plugin for IntelliJ Basic JSON knowledge Download Create a new repository, either locally or on GitHub/GitLab. If you did not create it locally, go to file -> new from version control and clone the repo Download the code from the Fabric example mod repo . You will then need to copy the contents into your repository folder. Note about the Minecraft Development Plugin While you can handle the initial setup with the plugin, it has major bugs when it comes to 1.17 mod setup. You will also gain experience with Gradle and Loom this way Initialise your mod First, open up the gradle.properties file within IntelliJ. It will look something like this: # Done to increase the memory available to gradle. org.gradle.jvmargs=-Xmx1G # Fabric Properties # check these on https://fabricmc.net/versions.html minecraft_version=1.17.1 yarn_mappings=1.17.1+build.14 loader_version=0.11.6 # Mod Properties mod_version = 1.0.0 maven_group = com.example archives_base_name = fabric-example-mod # Dependencies fabric_version=0.37.0+1.17 First, you want to delete the dependencies section of your gradle.properties file. Open up the fabric versions page in your browser. Replace your # Fabric Properties section with the gradle.properties values found on the versions page. Next, you need to set your mod information. Set maven_group to io.github.yourusername and set archives_base_name to the name of your mod, in lower-case letters and without spaces Fabric setup Now we have our Gradle set up, you will need to tell fabric about your mod. Navigate to your fabric.mod.json file found under src/main/resources It will look something like this: { \"schemaVersion\": 1, \"id\": \"modid\", \"version\": \"${version}\", \"name\": \"Example Mod\", \"description\": \"This is an example description! Tell everyone what your mod is about!\", \"authors\": [ \"Me!\" ], \"contact\": { \"homepage\": \"https://fabricmc.net/\", \"sources\": \"https://github.com/FabricMC/fabric-example-mod\" }, \"license\": \"CC0-1.0\", \"icon\": \"assets/modid/icon.png\", \"environment\": \"*\", \"entrypoints\": { \"main\": [ \"net.fabricmc.example.ExampleMod\" ] }, \"mixins\": [ \"modid.mixins.json\" ], \"depends\": { \"fabricloader\": \">=0.11.3\", \"fabric\": \"*\", \"minecraft\": \"1.17.x\", \"java\": \">=16\" }, \"suggests\": { \"another-mod\": \"*\" } } This files holds all the metadata about our mod, which Fabric uses to load the mod. Here is a list of fields and what you should change them to: id : The same value as you put for archives_base_name in gradle.properties . name : The formatted name of your mod. This can include spaces and capital letters. description : A short, formatted description of your mod authors : [ \"your_username\" ] Fill out the contact section with your relevant links, but you can remove it if you would like. license : The name and potentially version of the license of your choice. Although we strongly discourage keeping mods closed source, you may indicate this by omitting the field. environment : Leave at * if you want your mod to work on singleplayer (might cause issues), otherwise change it to server suggests : Feel free to remove this section depends : Will be covered in a tutorial showing how to use mod libraries. You can leave it as the default for now Entrypoints Entrypoints are the classes where Fabric starts your mod - a piece of code that runs on game launch. More information can be found on the fabric wiki page . Dedicated only Change the main entry in your entrypoints section to server You must now determine your package. This will most likely be the maven_group value from your gradle.properties , but with the name of your main class appended. An example would be: io.github.username.modname.ModName . After specifying this value, we now need to actually create the entrypoint. Delete the net folder found under src/main/java . Create a folder structure with your package, within the src/main/java directory. io.github.username.modname would become io/github/username/modname . Once you have created this folder, right click it in IntelliJ and press \"Create Java class\". The class name should be the value after your package specified in the entrypoints section. In the example case, it would be ModName . Just one more step now - we need to get Fabric to recognise our main class. Make the class you just created implement DedicatedServerModInitializer if you are dedicated server only, or ModInitializer if you support singleplayer. Add System.out.println(\"MOD LOADED\") to the overridden method IntelliJ should prompt you to make. Run configurations Go to the top right-hand corner of IntelliJ, press \"Add Configuration\", then under \"application\" you will find Minecraft Server . Select that and press debug. You will need to agree to the EULA, but if all goes well your mod has been loaded!","title":"Setup"},{"location":"setup/#setup","text":"","title":"Setup"},{"location":"setup/#prerequisites","text":"You will need: Java Development Kit Version 16 or newer IntelliJ IDEA Intermediate Java knowledge Git and basic git experience The Minecraft Development plugin for IntelliJ Basic JSON knowledge","title":"Prerequisites"},{"location":"setup/#download","text":"Create a new repository, either locally or on GitHub/GitLab. If you did not create it locally, go to file -> new from version control and clone the repo Download the code from the Fabric example mod repo . You will then need to copy the contents into your repository folder.","title":"Download"},{"location":"setup/#note-about-the-minecraft-development-plugin","text":"While you can handle the initial setup with the plugin, it has major bugs when it comes to 1.17 mod setup. You will also gain experience with Gradle and Loom this way","title":"Note about the Minecraft Development Plugin"},{"location":"setup/#initialise-your-mod","text":"First, open up the gradle.properties file within IntelliJ. It will look something like this: # Done to increase the memory available to gradle. org.gradle.jvmargs=-Xmx1G # Fabric Properties # check these on https://fabricmc.net/versions.html minecraft_version=1.17.1 yarn_mappings=1.17.1+build.14 loader_version=0.11.6 # Mod Properties mod_version = 1.0.0 maven_group = com.example archives_base_name = fabric-example-mod # Dependencies fabric_version=0.37.0+1.17 First, you want to delete the dependencies section of your gradle.properties file. Open up the fabric versions page in your browser. Replace your # Fabric Properties section with the gradle.properties values found on the versions page. Next, you need to set your mod information. Set maven_group to io.github.yourusername and set archives_base_name to the name of your mod, in lower-case letters and without spaces","title":"Initialise your mod"},{"location":"setup/#fabric-setup","text":"Now we have our Gradle set up, you will need to tell fabric about your mod. Navigate to your fabric.mod.json file found under src/main/resources It will look something like this: { \"schemaVersion\": 1, \"id\": \"modid\", \"version\": \"${version}\", \"name\": \"Example Mod\", \"description\": \"This is an example description! Tell everyone what your mod is about!\", \"authors\": [ \"Me!\" ], \"contact\": { \"homepage\": \"https://fabricmc.net/\", \"sources\": \"https://github.com/FabricMC/fabric-example-mod\" }, \"license\": \"CC0-1.0\", \"icon\": \"assets/modid/icon.png\", \"environment\": \"*\", \"entrypoints\": { \"main\": [ \"net.fabricmc.example.ExampleMod\" ] }, \"mixins\": [ \"modid.mixins.json\" ], \"depends\": { \"fabricloader\": \">=0.11.3\", \"fabric\": \"*\", \"minecraft\": \"1.17.x\", \"java\": \">=16\" }, \"suggests\": { \"another-mod\": \"*\" } } This files holds all the metadata about our mod, which Fabric uses to load the mod. Here is a list of fields and what you should change them to: id : The same value as you put for archives_base_name in gradle.properties . name : The formatted name of your mod. This can include spaces and capital letters. description : A short, formatted description of your mod authors : [ \"your_username\" ] Fill out the contact section with your relevant links, but you can remove it if you would like. license : The name and potentially version of the license of your choice. Although we strongly discourage keeping mods closed source, you may indicate this by omitting the field. environment : Leave at * if you want your mod to work on singleplayer (might cause issues), otherwise change it to server suggests : Feel free to remove this section depends : Will be covered in a tutorial showing how to use mod libraries. You can leave it as the default for now","title":"Fabric setup"},{"location":"setup/#entrypoints","text":"Entrypoints are the classes where Fabric starts your mod - a piece of code that runs on game launch. More information can be found on the fabric wiki page .","title":"Entrypoints"},{"location":"setup/#dedicated-only","text":"Change the main entry in your entrypoints section to server You must now determine your package. This will most likely be the maven_group value from your gradle.properties , but with the name of your main class appended. An example would be: io.github.username.modname.ModName . After specifying this value, we now need to actually create the entrypoint. Delete the net folder found under src/main/java . Create a folder structure with your package, within the src/main/java directory. io.github.username.modname would become io/github/username/modname . Once you have created this folder, right click it in IntelliJ and press \"Create Java class\". The class name should be the value after your package specified in the entrypoints section. In the example case, it would be ModName . Just one more step now - we need to get Fabric to recognise our main class. Make the class you just created implement DedicatedServerModInitializer if you are dedicated server only, or ModInitializer if you support singleplayer. Add System.out.println(\"MOD LOADED\") to the overridden method IntelliJ should prompt you to make.","title":"Dedicated only"},{"location":"setup/#run-configurations","text":"Go to the top right-hand corner of IntelliJ, press \"Add Configuration\", then under \"application\" you will find Minecraft Server . Select that and press debug. You will need to agree to the EULA, but if all goes well your mod has been loaded!","title":"Run configurations"}]}